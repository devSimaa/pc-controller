from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.callback_data import CallbackData
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –º–æ–∏ —Å–∫—Ä–∏–ø—Ç—ã
from config import token_api
from controler import (
    plus_dpi,
    minus_dpi,
    mouve_x_plus,
    mouve_x_minus,
    mouve_y_plus,
    mouve_y_minus,
    LKM,
    PKM,
)
from keyboard import (
    base_kb,
    clicker_ikb,
    screan_ikb,
    volume_ikb,
    controler_ikb,
    dpi_ikb,
    connect_ikb,
)

from create_folder import find_screandhots
import screanshot

# import hashlib


dpi = 15

storage = MemoryStorage()
bot = Bot(token_api)
dp = Dispatcher(
    bot=bot,
    storage=storage,
)


async def start_up(_):
    find_screandhots()
    print(" |<>| –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω |<>| ")


# —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    await message.answer(
        text="–ú–µ–Ω—é.",
        reply_markup=base_kb(),
    )
    await message.delete()


# ferfr
@dp.message_handler(text="üñ• –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
async def screanshot_command(message: types.Message):
    screanshot.screen()
    await message.answer(
        text=f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω.\n –ü–æ–¥ –∏–º–µ–Ω–Ω–µ–º [ {screanshot.random_name} ]",
        reply_markup=screan_ikb(),
    )


@dp.callback_query_handler(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
async def clicker_callback(callback: types.CallbackQuery):
    path = f"./screanshots/{screanshot.random_name}"
    with open(path, "rb") as photo:
        await callback.bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=photo,
        )


@dp.message_handler(text="‚ôæ –ö–ª–∏–∫–µ—Ä")
async def clicker(message: types.Message):
    await message.answer(
        text=f"‚öôÔ∏è –ú–µ–Ω—é –∫–ª–∏–∫–µ—Ä–∞",
        reply_markup=clicker_ikb(),
    )


@dp.message_handler(text="üîä –ú–∏–∫—à–µ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏")
async def —Åom_vmixer(message: types.Message):
    await message.answer(
        text=f"üéö –ú–∏–∫—à–µ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏: ",
        reply_markup=volume_ikb(),
    )


@dp.message_handler(text="üïπ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ø–∫")
async def com_controler(message: types.Message):
    await message.answer(
        text=f"–ß—Ç–æ–± –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—É, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É.",
        reply_markup=connect_ikb(),
    )


@dp.callback_query_handler(text=["connect"])
async def connect_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text=f"üïπ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä: \n–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–æ—Ä–∞ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—å—Å—è –ø–∞–ª—å—Ü–µ—Å –≤ –≤–µ—Ä—Ö –∏ –Ω–∏–∑.",
        reply_markup=controler_ikb(),
    )


@dp.callback_query_handler(text=["DPI"])
async def controler_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text=f"üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:",
        reply_markup=dpi_ikb(),
    )


@dp.callback_query_handler(text=["c_up", "c_down", "c_left", "c_right"])
async def controler_x_y_callback(callback: types.CallbackQuery):
    if callback.data == "c_up":
        mouve_y_minus(dpi)
        await callback.answer(" –í–≤–µ—Ä—Ö")
    elif callback.data == "c_down":
        mouve_y_plus(dpi)
        await callback.answer(" –í–Ω–∏–∑")
    elif callback.data == "c_left":
        mouve_x_minus(dpi)
        await callback.answer(" –õ–µ–≤–æ")

    elif callback.data == "c_right":
        mouve_x_plus(dpi)
        await callback.answer(" –ü—Ä–∞–≤–æ")


@dp.callback_query_handler(
    text=["c_left_button", "c_right_button", "c_plus", "c_minus", "c_wright"]
)
async def controler_x_y_callback(callback: types.CallbackQuery):
    global dpi
    if callback.data == "c_left_button":
        LKM()
        await callback.answer(" –õ–ö–ú")

    elif callback.data == "c_right_button":
        PKM()
        await callback.answer(" –ü–ö–ú")

    elif callback.data == "c_plus":
        dpi = plus_dpi(dpi)
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")

    elif callback.data == "c_minus":
        if dpi <= 15:
            await callback.answer(f"dpi —É–∂–µ –Ω–∞ –º–∏–Ω–∏–º—É–º–µ]")
        elif dpi > 15:
            dpi = minus_dpi(dpi)
            await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")

    elif callback.data == "c_wright":
        await callback.answer(" –ü–æ–∫–∞ –Ω–µ—Ç—É")


@dp.callback_query_handler(
    text=["d5", "d15", "d45", "d75", "d105", "d135", "d180", "d225", "d345"]
)
async def edit_dpi_callback(callback: types.CallbackQuery):
    global dpi
    if callback.data == "d5":
        dpi = 5
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")
    elif callback.data == "d15":
        dpi = 15
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")
    elif callback.data == "d45":
        dpi = 45
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")
    elif callback.data == "d75":
        dpi = 75
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")
    elif callback.data == "d105":
        dpi = 105
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")
    elif callback.data == "d135":
        dpi = 135
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")
    elif callback.data == "d180":
        dpi = 180
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")
    elif callback.data == "d225":
        dpi = 225
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")
    elif callback.data == "d345":
        dpi = 345
        await callback.answer(f"–¢–µ–ø–µ—Ä—å dpi [{dpi}]")


@dp.callback_query_handler(text=["–í–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–∫–µ—Ä–∞", "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–∫–µ—Ä–∞"])
async def clicker_callback(callback: types.CallbackQuery):
    global ggg
    if callback.data == "–í–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–∫–µ—Ä–∞":
        ggg = True
    elif callback.data == "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–∫–µ—Ä–∞":
        ggg = False


if __name__ == "__main__":
    executor.start_polling(
        dp,
        on_startup=start_up,
        skip_updates=True,
    )
